import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id 'java'
    id 'application'
    id 'com.palantir.docker' version '0.35.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id "org.owasp.dependencycheck" version "8.4.0"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'com.github.jk1.dependency-license-report' version "2.5"
    id "de.undercouch.download" version "5.5.0"
}

group 'com.exactpro.th2'
version release_version

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    mavenLocal()

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

dependencies {
    implementation platform('com.exactpro.th2:bom:4.5.0')
    implementation 'com.exactpro.th2:common:5.7.1-dev'
    implementation 'com.exactpro.th2:read-file-common-core:3.2.0-TH2-5136-+'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'com.fasterxml.jackson.core:jackson-databind'

    implementation "org.slf4j:slf4j-api"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core:5.5.0'
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.name,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

description = 'DataReaderClient'

dockerPrepare {
    dependsOn installDist
}

docker {
    copySpec.from("$buildDir/install")
}

application {
    mainClass.set("com.exactpro.th2.readfile.Main")
    applicationName = "service"
}

dependencyCheck {
    formats=['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS=5
    suppressionFile = file('suppressions.xml')

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)]
    renderers = [new JsonReportRenderer('licenses.json', false)]
    excludeOwnGroup = false
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}